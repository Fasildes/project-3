"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.generateHtml = exports.getDependenciesInfo = exports.readParentPkgJson = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-console */
const read_package_json_1 = __importDefault(require("read-package-json"));
const axios_1 = __importDefault(require("axios"));
const ejs_1 = __importDefault(require("ejs"));
const promises_1 = __importDefault(require("fs/promises"));
const open_1 = __importDefault(require("open"));
const lodash_1 = __importDefault(require("lodash"));
const emojic_1 = __importDefault(require("emojic"));
const currentWorkingDir = process.cwd();
const readParentPkgJson = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const packageJsonPath = `${currentWorkingDir}/package.json`;
        const parentPkgJsonData = yield new Promise((resolve, reject) => {
            (0, read_package_json_1.default)(packageJsonPath, console.error, false, function (err, data) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(data);
            });
        });
        const { dependencies, devDependencies } = yield (0, exports.getDependenciesInfo)(parentPkgJsonData);
        parentPkgJsonData['dependencies'] = dependencies;
        parentPkgJsonData['devDependencies'] = devDependencies;
        parentPkgJsonData.readme = null;
        return parentPkgJsonData;
    }
    catch (error) {
        return null;
    }
});
exports.readParentPkgJson = readParentPkgJson;
const getDependenciesInfo = (parentPkgJsonData) => __awaiter(void 0, void 0, void 0, function* () {
    const { dependencies = [], devDependencies = [] } = parentPkgJsonData;
    const npmRegistryApi = 'https://registry.npmjs.org/';
    /**
     * Core dependencies
     */
    console.log(`Getting dependencies info[Loading...] ${emojic_1.default.whiteCheckMark}`);
    const depKeys = Object.keys(dependencies);
    const getDepsPromises = depKeys.map((dep) => axios_1.default.get(`${npmRegistryApi}/${dep}`));
    const depPromiseResults = yield Promise.all(getDepsPromises);
    const depAllData = depPromiseResults.map((r) => r.data);
    const finalDeps = depKeys.map((key) => {
        const currentDepVersion = dependencies[key];
        const dataDep = depAllData.find((d) => {
            return d.name === key;
        });
        const currentVersion = currentDepVersion.replace('^', '');
        const currentVersionHome = lodash_1.default.get(dataDep.versions[`${currentVersion}`], 'homepage', '');
        const latestVersion = dataDep['dist-tags'].latest;
        const latestVersionHome = lodash_1.default.get(dataDep.versions[`${latestVersion}`], 'homepage', '');
        let status = 'text-success';
        if (currentVersion != latestVersion) {
            status = 'text-danger';
        }
        return {
            name: dataDep.name,
            currentVersion: {
                version: currentVersion,
                homepage: currentVersionHome
            },
            latestVersion: {
                version: latestVersion,
                homepage: latestVersionHome
            },
            readme: dataDep.readme,
            status
        };
    });
    /**
     * Dev dependencies
     */
    console.log(`Getting dev dependencies info[Loading...] ${emojic_1.default.whiteCheckMark}`);
    const devDepKeys = Object.keys(devDependencies);
    const getDevDepsPromises = devDepKeys.map((dep) => axios_1.default.get(`${npmRegistryApi}/${dep}`));
    const devDepPromiseResults = yield Promise.all(getDevDepsPromises);
    const devDepAllData = devDepPromiseResults.map((r) => r.data);
    const finalDevDeps = devDepKeys.map((key) => {
        const currentDepVersion = devDependencies[key];
        const dataDep = devDepAllData.find((d) => {
            return d.name === key;
        });
        const currentVersion = currentDepVersion.replace('^', '');
        const currentVersionHome = lodash_1.default.get(dataDep.versions[`${currentVersion}`], 'homepage', '');
        const latestVersion = dataDep['dist-tags'].latest;
        const latestVersionHome = lodash_1.default.get(dataDep.versions[`${latestVersion}`], 'homepage', '');
        let status = 'text-success';
        if (currentVersion != latestVersion) {
            status = 'text-danger';
        }
        return {
            name: dataDep.name,
            currentVersion: {
                version: currentVersion,
                homepage: currentVersionHome
            },
            latestVersion: {
                version: latestVersion,
                homepage: latestVersionHome
            },
            readme: dataDep.readme,
            status
        };
    });
    return {
        dependencies: finalDeps,
        devDependencies: finalDevDeps
    };
});
exports.getDependenciesInfo = getDependenciesInfo;
const generateHtml = (packageJson) => __awaiter(void 0, void 0, void 0, function* () {
    console.log(`Generating HTML report ${emojic_1.default.whiteCheckMark}`);
    const tmpl = `${__dirname}/../node-modules-report.ejs`;
    const out = `${currentWorkingDir}/node-modules-report.html`;
    const html = yield ejs_1.default.renderFile(tmpl, packageJson, { async: true });
    yield promises_1.default.writeFile(out, html);
    yield (0, open_1.default)(out);
    console.log(`Opening HTML report ${emojic_1.default.whiteCheckMark}`);
});
exports.generateHtml = generateHtml;
const start = () => __awaiter(void 0, void 0, void 0, function* () {
    console.log(`Reading package.json ${emojic_1.default.vulcanSalute}`);
    const packageJson = yield (0, exports.readParentPkgJson)();
    yield (0, exports.generateHtml)(packageJson);
    console.log(`Done ${emojic_1.default.whiteCheckMark}`);
});
exports.start = start;
//# sourceMappingURL=index.js.map