"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const latestVersion = require("latest-version");
const readPackageJson = require("read-package-json");
const bluebird_1 = require("bluebird");
// import * as path from 'path';
const fs = require("fs");
const readFilePromise = (fPath) => {
    return new bluebird_1.Promise((resolve, reject) => {
        readPackageJson(fPath, false, (err, data) => {
            if (err) {
                return reject(err);
            }
            return resolve(data);
        });
    });
};
exports.updaterFun = (pathToPackage, newPath) => __awaiter(this, void 0, void 0, function* () {
    const packageJsonData = yield readFilePromise(pathToPackage);
    const dependencies = bluebird_1.Promise.map(Object.keys(packageJsonData.dependencies), (pkg) => {
        return latestVersion(pkg).then(version => {
            const x = {};
            x[pkg.toString()] = '^' + version;
            return x;
        });
    });
    const devDep = bluebird_1.Promise.map(Object.keys(packageJsonData.devDependencies), pkg => {
        return latestVersion(pkg).then(version => {
            const x = {};
            x[pkg.toString()] = '^' + version;
            return x;
        });
    });
    const fullData = bluebird_1.Promise.resolve(packageJsonData);
    const results = yield bluebird_1.Promise.all([dependencies, devDep, fullData]);
    const newPkg = results[0].reduce((a, c) => (Object.assign({}, a, c)), Object.create(null));
    const newDevPkg = results[1].reduce((a, c) => (Object.assign({}, a, c)), Object.create(null));
    results[2].dependencies = newPkg;
    results[2].devDependencies = newDevPkg;
    yield new bluebird_1.Promise((resolve, reject) => {
        fs.writeFile(newPath, JSON.stringify(results[2]), err => {
            if (err) {
                // tslint:disable-next-line:no-console
                console.log('err', err);
                return reject(err);
            }
            // tslint:disable-next-line:no-console
            console.log('created', newPath);
            return resolve();
        });
    });
});
